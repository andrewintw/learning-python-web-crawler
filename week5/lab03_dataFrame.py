import pandas as pd

#           ,元大台灣50, 元大臺灣ESG永續, 元大高股息
# 2021-07-01,138.3,     34.71,         35.0
# 2021-07-02,138.3,     34.7,          35.2
# 2021-07-03,139.6,     35.04,         35.69

# ------------------------------------------------------------------
# 資料是個串列，但串列裡面的每個元素是字典
values = [
    { '元大台灣50': 138.3, '元大臺灣ESG永續': 34.71, '元大高股息': 35.0 },
    { '元大台灣50': 138.3, '元大臺灣ESG永續': 34.7,  '元大高股息': 35.2 },
    { '元大台灣50': 139.6, '元大臺灣ESG永續': 35.04, '元大高股息': 35.69 },
]

df = pd.DataFrame(values)
print(df)


# ------------------------------------------------------------------
# 資料是個字典，但字典裡面的每個元素值是串列
values = {
    '元大台灣50':     [ 138.3, 138.3, 139.6 ],
    '元大臺灣ESG永續': [ 34.71, 34.7, 35.04 ],
    '元大高股息':     [ 35.0, 35.2, 35.69 ]
}
df = pd.DataFrame(values)
print(df)

# ------------------------------------------------------------------
# 顯示自訂的 index (ex: 日期)
etf_date =  [ '2021-07-01', '2021-07-02', '2021-07-03' ]

values = {
    '元大台灣50':     [ 138.3, 138.3, 139.6 ],
    '元大臺灣ESG永續': [ 34.71, 34.7, 35.04 ],
    '元大高股息':     [ 35.0, 35.2, 35.69 ]
}
df = pd.DataFrame(values, etf_date)
print(df)


# ------------------------------------------------------------------
# at 定位使用行列的名稱: (2021-07-02, 元大高股息) ==> 35.20
# iat 定位使用位置: i 是索引的位置，從 0 開始 (2, 2) ==> 35.69

#             元大台灣50  元大臺灣ESG永續  元大高股息
# 2021-07-01   138.3      34.71  35.00
# 2021-07-02   138.3      34.70  35.20
# 2021-07-03   139.6      35.04  35.69

etf_date =  [ '2021-07-01', '2021-07-02', '2021-07-03' ]

values = {
    '元大台灣50':     [ 138.3, 138.3, 139.6 ],
    '元大臺灣ESG永續': [ 34.71, 34.7, 35.04 ],
    '元大高股息':     [ 35.0, 35.2, 35.69 ]
}
df = pd.DataFrame(values, etf_date)
print(df)
print('at-------------------------------')
print(df.at[ '2021-07-02', '元大高股息' ])
print('iat-------------------------------')
print(df.iat[ 1, 2 ])


# ------------------------------------------------------------------
# loc (location) 讀取一群的資料, row, col 都可以指定多個，得到一群資料
# iloc 一樣使用 index

etf_date =  [ '2021-07-01', '2021-07-02', '2021-07-03' ]

values = {
    '元大台灣50':     [ 138.3, 138.3, 139.6 ],
    '元大臺灣ESG永續': [ 34.71, 34.7, 35.04 ],
    '元大高股息':     [ 35.0, 35.2, 35.69 ]
}
df = pd.DataFrame(values, etf_date)
print(df)

print('loc-------------------------------')
print(df.loc[ '2021-07-02' ])
print(df.loc[ '2021-07-02':'2021-07-03' ])     # 連續的 7-2 ~ 7-3
print(df.loc[ ['2021-07-01', '2021-07-03' ] ]) # 不連續的 7-1, 7-3 需要用 list

print(df.loc[ :, '元大臺灣ESG永續' ]) # : 表示前面的每一行
print(df.loc[ :, '元大高股息' ])

print(df.loc[ :, '元大台灣50' : '元大高股息' ])  # 連續印出從 '元大台灣50' ~ '元大高股息' 
print(df.loc[ :, [ '元大台灣50', '元大高股息' ] ])  # 只印 '元大台灣50' 和 '元大高股息' 

print(df.loc[ '2021-07-02', '元大臺灣ESG永續' ]) # 這個結果其實跟 at[] 一樣。但是 loc 的應用比 at 更廣泛，所以學 loc 就好 XD

print(df.loc[ [ '2021-07-01', '2021-07-03' ],
              [ '元大台灣50', '元大高股息' ] ])  # 取出自訂的區域
print(df.loc[ '2021-07-02':'2021-07-03',
               '元大台灣50':'元大高股息' ]) # 取出連續的區段

# 以下根據上面的 loc 對應改成 iloc
print('iloc-------------------------------')
print(df.iloc[ 1 ])
print(df.iloc[ 1:2 ]) # 要注意，如果是用 i 系列索引的，結束的 index 2 是不含的，需要用 3 才行
print(df.iloc[ 1:3 ]) # 這樣寫才對! python 的 index 是區間包含的概念

print(df.iloc[ [ 0, 2 ] ])
print(df.iloc[ :, 1 ])
print(df.iloc[ :, 2 ])

print(df.iloc[ :, 0 : 3 ])
print(df.iloc[ :, [ 0, 2 ] ]) 

print(df.iloc[ 1, 1 ])

print(df.iloc[ [ 0, 2 ],
               [ 0, 2 ] ]) 
print(df.iloc[ 1:3,
               0:3 ]) 


# ------------------------------------------------------------------
# 直接索引

etf_date =  [ '2021-07-01', '2021-07-02', '2021-07-03' ]

values = {
    '元大台灣50':     [ 138.3, 138.3, 139.6 ],
    '元大臺灣ESG永續': [ 34.71, 34.7, 35.04 ],
    '元大高股息':     [ 35.0, 35.2, 35.69 ]
}
df = pd.DataFrame(values, etf_date)
print(df)

# row, col 的表示方式只能二選一
print(df[1:3]) # row 的表示方式
print(df[ '2021-07-02': '2021-07-03' ])


print(df[ ['元大台灣50','元大臺灣ESG永續'] ])
print(df[ '元大高股息' ])


# print(df[ '2021-07-02', '元大高股息' ]) # 語法錯誤

# print(df[2]) # 語法錯誤，就算只要一行也需要指定範圍
print(df[2:3]) # 要改成這樣

# 直接索引的取值方式不直觀，但適合用來 filter
# ex: 取出元大高股息超過 35.1 的
print(df[df['元大高股息']>35.10])
print(df[df['元大台灣50']>139.0])

print("------------------------------------------------")
print(type(df['元大台灣50']>139.0), df['元大台灣50']>139.0)
print("------------------------------------------------")
print(type(df[df['元大台灣50']>139.0]), df[df['元大台灣50']>139.0])
print("------------------------------------------------")
print((df[ '元大高股息' ])[0:1])

